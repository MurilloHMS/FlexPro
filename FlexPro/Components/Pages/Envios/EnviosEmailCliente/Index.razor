@page "/envioEmailClientes"
@using FlexPro.Repositories
@inject RelatorioClientesRepository _Repository

@attribute [Authorize]

<PageTitle>Metricas Clientes</PageTitle>

<MudText Typo="Typo.h2" Align="Align.Center">Métricas Clientes</MudText>
<br><br><br>
<MudPaper>
    <MudStepper NonLinear ShowResetButton OnPreviewInteraction="OnPreviewInteraction">
        <MudStep Title="Passo 1" SecondaryText="Upload planilha das métricas">
            <MudFileUpload T="IBrowserFile" FilesChanged="UploadFileStep1">
                <ActivatorContent>
                    <MudButton StartIcon="@Icons.Material.Filled.Upload" Color="Color.Primary">Selecionar Arquivo</MudButton>
                </ActivatorContent>
                <SelectedTemplate>
                    @if (_fileStep1 != null)
                    {
                        <MudText>@_fileStep1.Name</MudText>
                    }
                    else
                    {
                        <MudText>Sem Arquivo</MudText>
                    }
                </SelectedTemplate>
            </MudFileUpload>
        </MudStep>
        
        <MudStep Title="Passo 2" SecondaryText="Upload planilha das ordens de serviço">
            <MudFileUpload T="IBrowserFile" FilesChanged="UploadFileStep2">
                <ActivatorContent>
                    <MudButton StartIcon="@Icons.Material.Filled.Upload" Color="Color.Primary">Selecionar Arquivo</MudButton>
                </ActivatorContent>
                <SelectedTemplate>
                    @if (_fileStep2 != null)
                    {
                        <MudText>@_fileStep2.Name</MudText>
                    }
                    else
                    {
                        <MudText>Sem Arquivo</MudText>
                    }
                </SelectedTemplate>
            </MudFileUpload> 
        </MudStep>
        
        <MudStep Title="Passo 3" SecondaryText="Dados Processados"  >
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" Style="@(IsProcessing ? "display:block" : "display:none")" />
            @if (IsProcessing)
            {
                <MudText>Processando arquivos...</MudText>
            }
            else if (ProcessedData.Any())
            {
                <MudButton Color="Color.Success" EndIcon="@Icons.Material.Filled.Send" OnClick="EnviarDadosCliente">Enviar Dados Para Os Clientes</MudButton>
            }
            else
            {
                <MudText>Nenhum dado processado.</MudText>
            }
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="ProcessFiles">Processar arquivos</MudButton>
        </MudStep>

        <MudStep Title="Validação" SecondaryText="Valide os dados e envie ao cliente">
        </MudStep>
    </MudStepper>
</MudPaper>

@code {
    [Inject] 
    IDialogService DialogService { get; set; }

    private IBrowserFile _fileStep1;
    private IBrowserFile _fileStep2;
    private bool IsProcessing = false;
    
    private List<DadosRelatorioEnvioCliente> ProcessedData = new ();
    private List<DadosOrdemServicoCliente> OrdensDeServico = new();
    private List<DadosVendaCliente> DadosVendas = new();

    private MemoryStream _fileStep1Stream = new();
    private MemoryStream _fileStep2Stream = new();

    private async Task UploadFileStep1(IBrowserFile file)
    {
        _fileStep1 = file;
        await using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
        await stream.CopyToAsync(_fileStep1Stream);
        _fileStep1Stream.Position = 0;
    }

    private async Task UploadFileStep2(IBrowserFile file)
    {
        _fileStep2 = file;
        await using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
        await stream.CopyToAsync(_fileStep2Stream);
        _fileStep2Stream.Position = 0;
    }


    private async Task ProcessFiles()
    {
        if (_fileStep1 == null || _fileStep2 == null)
        {
            await DialogService.ShowMessageBox("Erro", "Os arquivos não foram carregados corretamente.");
            return;
        }

        try
        {
            IsProcessing = true;
            await ReadFileData();

            IsProcessing = false;
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox("Erro", $"Falha ao processar os arquivos: {ex.Message}");
        }
    }

    private async Task ReadFileData()
{
    try
    {
        if (_fileStep1Stream.Length > 0 && _fileStep2Stream.Length > 0)
        {
            _fileStep1Stream.Position = 0;
            using (XLWorkbook workbook = new(_fileStep1Stream))
            {
                var planilha = workbook.Worksheets.First();
                var fileData = planilha?.RowsUsed().Skip(3).Select(row => new DadosVendaCliente
                {
                    CodigoCliente = row.Cell(3).TryGetValue<string>(out var codigoDoCliente) ? codigoDoCliente : default,
                    NomeCliente = row.Cell(4).TryGetValue<string>(out var nomeDoCliente) ? nomeDoCliente : default,
                    CodigoProduto = row.Cell(6).TryGetValue<string>(out var codigoDoProduto) ? codigoDoProduto : default,
                    Produto = row.Cell(7).TryGetValue<string>(out var produto) ? produto : default,
                    DataVenda = row.Cell(2).TryGetValue<DateTime>(out var data) ? data : default,
                    NumeroNfe = row.Cell(1).TryGetValue<string>(out var numeroNfe) ? numeroNfe : default,
                    Quantidade = row.Cell(10).TryGetValue<double>(out var quantidade) ? quantidade : default,
                    ValorNota = row.Cell(9).TryGetValue<decimal>(out var valorNota) ? valorNota : default
                }).ToList();

                DadosVendas.Clear();
                DadosVendas.AddRange(fileData ?? new List<DadosVendaCliente>());
            }

            _fileStep2Stream.Position = 0;
            using (XLWorkbook workbook = new(_fileStep2Stream))
            {
                var planilha = workbook.Worksheets.First();
                var fileData = planilha?.RowsUsed().Skip(3).Select(row => new DadosOrdemServicoCliente
                {
                    NumeroOS = row.Cell(1).TryGetValue<string>(out var numeroOs) ? numeroOs : default,
                    CodigoCliente = row.Cell(2).TryGetValue<string>(out var codigoCliente) ? codigoCliente : default,
                    NomeCliente = row.Cell(3).TryGetValue<string>(out var nomeDoCliente) ? nomeDoCliente : default,
                    DataAbertura = row.Cell(4).TryGetValue<DateTime>(out var dataDeAbertura) ? dataDeAbertura : default,
                    DataFechamento = row.Cell(5).TryGetValue<DateTime>(out var dataDoFechamento) ? dataDoFechamento : default,
                    DiasDaSemana = row.Cell(6).TryGetValue<int>(out var diasDaSemana) ? diasDaSemana : default
                }).ToList();

                OrdensDeServico.Clear();
                OrdensDeServico.AddRange(fileData ?? new List<DadosOrdemServicoCliente>());
            }

            if (DadosVendas.Any() && OrdensDeServico.Any())
            {
                ProcessedData = DadosVendas.Select(v => v.CodigoCliente).Union(OrdensDeServico.Select(s => s.CodigoCliente))
                    .Distinct().Select(codigoDoCliente => new DadosRelatorioEnvioCliente
                    {
                        CodigoSistema = codigoDoCliente,
                        Nome = DadosVendas.FirstOrDefault(v => v.CodigoCliente == codigoDoCliente)?.NomeCliente
                            ?? OrdensDeServico.FirstOrDefault(s => s.CodigoCliente == codigoDoCliente)?.NomeCliente,
                        DadosVendas = DadosVendas.Where(v => v.CodigoCliente == codigoDoCliente).ToList(),
                        DadosServicos = OrdensDeServico.Where(s => s.CodigoCliente == codigoDoCliente).ToList()
                    }).ToList();
            }
        }
        else
        {
            await DialogService.ShowMessageBox("Erro", "Os arquivos não foram carregados corretamente.");
        }
    }
    catch (Exception e)
    {
        await DialogService.ShowMessageBox("Erro", $"Falha ao processar os arquivos: {e.Message} \n\nStack: {e.StackTrace}");
    }
}

    
    private async Task OnPreviewInteraction(StepperInteractionEventArgs arg)
    {
        if (arg.Action == StepAction.Complete) 
        {
            await ControlStepCompletion(arg);
        }
        else if (arg.Action == StepAction.Activate) 
        {
            await ControlStepNavigation(arg);
        }
    }

    private async Task ControlStepCompletion(StepperInteractionEventArgs arg)
    {
        switch (arg.StepIndex) {
            case 0:
                if (_fileStep1 == null) 
                {
                    await DialogService.ShowMessageBox("Erro", "Você não selecionou o arquivo");
                    arg.Cancel = true;
                }
                break;
            case 1:
                if (_fileStep2 == null) 
                {
                    await DialogService.ShowMessageBox("Erro", "Você não selecionou o arquivo");
                    arg.Cancel = true;
                }
                break;
            case 2:
                if (ProcessedData == null || !ProcessedData.Any()) 
                {
                    // await ProcessFiles();
                    if (!ProcessedData.Any())
                    {
                        await DialogService.ShowMessageBox("Erro", "Erro ao processar os arquivos");
                        arg.Cancel = true;
                    }
                }
                break;
        }
    }

    private async Task ControlStepNavigation(StepperInteractionEventArgs arg)
    {
        if (arg.StepIndex == 2 && (ProcessedData == null || !ProcessedData.Any()))
        {
            await DialogService.ShowMessageBox("Erro", "Finalize os passos anteriores antes de continuar.");
            arg.Cancel = true;
        }
    }

    private async Task EnviarDadosCliente()
    {
        await _Repository.GetMetrics(ProcessedData);
    }
}
