@using FlexPro.Data
@using FlexPro.Models
@using Microsoft.AspNetCore.Authorization

@inject IDialogService DialogService
@inject ApplicationDbContext _context
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

@attribute [Authorize]

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12" sm="12">
                <MudForm @ref="form" @bind-IsValid="isFormValid">
                    <MudDateRangePicker @bind-DateRange="@_dateRange" Margin="Margin.Dense" ReadOnly="false" Clearable="true"
                                        PlaceholderStart="Data Inicial" PlaceholderEnd="Data Final" AutoClose="true" 
                                        Color="Color.Primary"/>
                </MudForm>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseDialog" Color="Color.Secondary">Cancelar</MudButton>
        <MudButton OnClick="EmitirRelat칩rio" Color="Color.Primary" Disabled="!isFormValid">Emitir</MudButton>
    </DialogActions>
</MudDialog>
@code {
    private MudForm form;
    private bool isFormValid;
    private DateRange _dateRange { get; set; }
    
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    
    [Parameter] 
    public string tipo { get; set; }
    
    [Parameter]
    public bool isDownload { get; set;}

    private void CloseDialog()
    {
        MudDialog.Cancel();
    }

    private void EmitirRelat칩rio()
    {
        try
        {
            if (_dateRange != null && _dateRange.End.HasValue)
            {
                string dataFinalFormatada = _dateRange.End.Value.ToString("yyyy-MM-dd");
                switch (tipo)
                {
                    case "Geral":
                        Navigation.NavigateTo($"/Relatorios/Abastecimento/Geral/{dataFinalFormatada}");
                        break;
                }
            }
            else
            {
                Snackbar.Add("Por favor, selecione um intervalo de datas v치lido.", Severity.Warning);
            }
            
        }
        catch (Exception e)
        {
            Snackbar.Add($"Ocorreu um erro ao Emitir o Relat칩rio {tipo}: {e.Message}", Severity.Error);
            throw;
        }
        MudDialog?.Close();
    }
    
}