@page "/calcularICMS"
@using FlexPro.Models

@inject ISnackbar Snackbar

<MudText Typo="Typo.h4" Align="Align.Center">Calcular ICMS</MudText>

<MudStack Style="width: 100%">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                   Accept=".xml"
                   @ref="@_fileUpload"
                   OnFilesChanged="OnInputFileChanged"
                   AppendMultipleFiles
                   Hidden="@false"
                   InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                   InputStyle="opacity:0"
                   tabindex="-1"
                   @ondrop="@ClearDragClass"
                   @ondragenter="@SetDragClass"
                   @ondragleave="@ClearDragClass"
                   @ondragend="@ClearDragClass">
        <ActivatorContent>
            <MudPaper Height="300px"
                      Outlined="true"
                      Class="@_dragClass">
                <MudText Typo="Typo.h6">
                    Arraste e solte os arquivos aqui ou clique para selecionar.
                </MudText>
                @foreach (var file in _fileNames)
                {
                    <MudChip T="string"
                             Color="Color.Dark"
                             Text="@file.Name"
                             tabindex="-1"/>
                }
            </MudPaper>
        </ActivatorContent>
    </MudFileUpload>
    <MudToolBar Gutters="@false"
                Class="relative d-flex justify-end gap-4">
        <MudButton Color="Color.Primary"
                   OnClick="@OpenFilePickerAsync"
                   Variant="Variant.Filled">
            Selecionar Arquivos
        </MudButton>
        <MudButton Color="Color.Primary"
                   Disabled="@(!_fileNames.Any())"
                   OnClick="@Upload"
                   Variant="Variant.Filled">
            Calcular ICMS
        </MudButton>
        <MudButton Color="Color.Error"
                   Disabled="@(!_fileNames.Any())"
                   OnClick="@ClearAsync"
                   Variant="Variant.Filled">
            Apagar arquivos
        </MudButton>
    </MudToolBar>
</MudStack>

@code {
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private readonly List<IBrowserFile> _fileNames = new();
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;
    
    public List<ICMS> DadosICMS { get; set; }
    
    private async Task ClearAsync()
    {
        await (_fileUpload?.ClearAsync() ?? Task.CompletedTask);
        _fileNames.Clear();
        ClearDragClass();
    }

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            _fileNames.Add(file);
        }
    }

    private void Upload()
    {
        // Upload the files here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("TODO: Upload your files!");

        foreach (var file in _fileNames)
        {
            DadosICMS.Add(ProcessarXML(file));
        }
        
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
    
    private ICMS ProcessarXML(IBrowserFile file)
    {
        try
        {
            XDocument xmlDoc = XDocument.Load(file.OpenReadStream());
            XNamespace ns = xmlDoc.Root.GetDefaultNamespace();

            var dados = new ICMS();
            var numNfTag = xmlDoc.Descendants(ns + "ide").FirstOrDefault();
            if (numNfTag != null)
            {
                dados.nNF = numNfTag.Element(ns + "nNF").Value;
            }
            
            var icmsTag = xmlDoc.Descendants(ns + "ICMSTot").FirstOrDefault();
            if (icmsTag != null)
            {
                string icms = icmsTag.Element(ns + "vICMS").Value;
                dados.vICMS = !string.IsNullOrEmpty(icms) && decimal.TryParse(icms, NumberStyles.Any, CultureInfo.InvariantCulture, out decimal result) ? result : 0m;
            }
            return dados;
        }
        catch (Exception e)
        {
            throw;
        }
    }
}
