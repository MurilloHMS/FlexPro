@page "/separarPDF"
@using System.Net
@using FlexPro.Models
@using Microsoft.AspNetCore.Authorization

@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

@attribute [Authorize]

<MudText Typo="Typo.h4">Separar PDF</MudText>

<MudStack>
    <MudFileUpload T="IBrowserFile"
                   @ref="@_fileUpload"
                   OnFilesChanged="OnInputFileChanged"
                   Hidden="@false"
                   InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                   InputStyle="opacity:0"
                   tabindex="-1"
                   Accept=".pdf"
                   @ondrop="@ClearDragClass"
                   @ondragenter="@SetDragClass"
                   @ondragleave="@ClearDragClass"
                   @ondragend="@ClearDragClass">
        <ActivatorContent>
            <MudPaper Height="300px"
                      Outlined="true"
                      Class="@_dragClass">
                <MudText Typo="Typo.h6">
                    Arraste e solte o arquivo aqui ou clique para selecionar um arquivo
                </MudText>
                @foreach (var file in _fileNames)
                {
                <MudChip T="string"
                         Color="Color.Dark"
                         Text="@file.Name"
                         tabindex="-1" />
                }
            </MudPaper>
        </ActivatorContent>
    </MudFileUpload>
    <MudToolBar Gutters="@false"
                Class="relative d-flex justify-end gap-4">
        <MudButton Color="Color.Tertiary"
                   OnClick="@OpenFilePickerAsync"
                   Variant="Variant.Filled">
            Selecionar arquivo
        </MudButton>
        <MudButton Color="Color.Primary"
                   Disabled="@(!_fileNames.Any())"
                   OnClick="@Upload"
                   Variant="Variant.Filled">
            Separar Arquivos
        </MudButton>
        <MudButton Color="Color.Error"
                   Disabled="@(!_fileNames.Any())"
                   OnClick="@LimparAsync"
                   Variant="Variant.Filled">
            Apagar
        </MudButton>
    </MudToolBar>
</MudStack>

@if(paginasSeparadas is not null && paginasSeparadas.Any())
{
    <MudStack>
        @foreach (var pagina in paginasSeparadas)
        {
            <MudTextField Label="Nome do arquivo" @bind-Value="pagina.Nome" />
        }
    </MudStack>
    <MudButton OnClick="@(() => SalvarDados())" Color="Color.Primary" Variant="Variant.Filled">Salvar</MudButton>
}

<script>
    function downloadFileFromStream(fileName, fileBase64) {
        const link = document.createElement('a');
        link.href = 'data:application/zip;base64,' + fileBase64;
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
</script>

@code {

    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private readonly List<IBrowserFile> _fileNames = new();
    private MudFileUpload<IBrowserFile>? _fileUpload;
    private string inputPdfPath;

    private List<SepararPDF> paginasSeparadas = new List<SepararPDF>();


    private async Task LimparAsync()
    {
        await (_fileUpload?.ClearAsync() ?? Task.CompletedTask);
        _fileNames.Clear();
        ClearDragClass();

    }
    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            _fileNames.Add(file);
        }
    }

    private async Task Upload()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("Iniciando Processamento dos arquivos...");

        foreach(var file in _fileNames)
        {
            await abrirArquivos(file);
        }
    }


    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;

    private async Task abrirArquivos(IBrowserFile file)
    {
        try
        {
            if (file is null || file.Size is 0)
            {
                Snackbar.Add($"Arquivo {file.Name} inválido", Severity.Error);
                return;
            }

            inputPdfPath = Path.GetTempFileName();
            using (var stream = new FileStream(inputPdfPath, FileMode.Create))
            {
                await file.OpenReadStream().CopyToAsync(stream);
            }

            var paginas = SepararPDF.GetSeparatePdfByPage(inputPdfPath);
            if (paginas is null || paginas.Count is 0)
            {
                Snackbar.Add("Não é possível extrair paginas do pdf informado", Severity.Error);
                return;
            }

            paginasSeparadas = paginas;
        }
        catch (Exception e)
        {
            Snackbar.Add($"Erro ao processar o arquivo: {e.Message}", Severity.Error);
        }

    }

    private async Task SalvarDados()
    {
        if (paginasSeparadas is not null && paginasSeparadas.Any())
        {
            var outputFolder = Path.Combine(Path.GetTempPath(), "Separados");
            if (!Directory.Exists(outputFolder))
            {
                Directory.CreateDirectory(outputFolder);
            }
            
            SepararPDF.SeparatedPdfByPage(inputPdfPath, outputFolder, paginasSeparadas);

            string zipFileName = "PDF_Separados.zip";
            string userDownloadsPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "Downloads");
            string zipFilePath = Path.Combine(userDownloadsPath, zipFileName);

            int fileIndex = 1;
            while (File.Exists(zipFilePath))
            {
                zipFileName = $"Separados({fileIndex}).zip";
                zipFilePath = Path.Combine(userDownloadsPath, zipFileName);
                fileIndex++;
            }

            using var memoryStream = new MemoryStream();
            System.IO.Compression.ZipFile.CreateFromDirectory(outputFolder, memoryStream);
            memoryStream.Seek(0, SeekOrigin.Begin);
            
            var base64File = Convert.ToBase64String(memoryStream.ToArray());
            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", "PDF_Separados.zip", base64File);

            Directory.Delete(outputFolder, true);
        }
    }
}