@page "/coletarDadosNotasFiscais"
@using LoadOptions = System.Xml.Linq.LoadOptions

@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

@attribute [Authorize]

<MudText Typo="Typo.h4" Align="Align.Center">Coletar Dados Notas Fiscais</MudText>

<MudStack Style="width: 100%">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                   Accept=".xml"
                   MaximumFileCount="1000"
                   @ref="@_fileUpload"
                   OnFilesChanged="OnInputFileChanged"
                   AppendMultipleFiles
                   Hidden="@false"
                   InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                   InputStyle="opacity:0"
                   tabindex="-1"
                   @ondrop="@ClearDragClass"
                   @ondragenter="@SetDragClass"
                   @ondragleave="@ClearDragClass"
                   @ondragend="@ClearDragClass">
        <ActivatorContent>
            <MudPaper Height="300px"
                      Outlined="true"
                      Class="@_dragClass">
                <MudText Typo="Typo.h6">
                    Arraste e solte os arquivos aqui ou clique para selecionar.
                </MudText>
                @if (_fileNames != null && _fileNames.Any())
                {
                    @for (int i = 0; i < 20 && i < _fileNames.Count; i++)
                    {
                        <MudChip T="string"
                                 Color="Color.Dark"
                                 Text="@_fileNames[i].Name"
                                 tabindex="-1"/>
                    }
                }
            </MudPaper>
        </ActivatorContent>
    </MudFileUpload>
    <MudToolBar Gutters="@false"
                Class="relative d-flex justify-end gap-4">
        <MudButton Color="Color.Primary"
                   OnClick="@OpenFilePickerAsync"
                   Variant="Variant.Filled">
            Selecionar Arquivos
        </MudButton>
        <MudButton Color="Color.Primary"
                   Disabled="@(!_fileNames.Any())"
                   OnClick="@Upload"
                   Variant="Variant.Filled">
            Coletar Dados
        </MudButton>
        <MudButton Color="Color.Error"
                   Disabled="@(!_fileNames.Any())"
                   OnClick="@ClearAsync"
                   Variant="Variant.Filled">
            Apagar arquivos
        </MudButton>
    </MudToolBar>
</MudStack>

<script>
    function downloadFileFromStream(fileName, fileBase64) {
        const link = document.createElement('a');
        link.href = 'data:application/octet-stream;base64,' + fileBase64;
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
</script>


@code {
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private readonly List<IBrowserFile> _fileNames = new();
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;

    public List<DadosNotasFiscais> DadosNFe = new ();

    private async Task ClearAsync()
    {
        await (_fileUpload?.ClearAsync() ?? Task.CompletedTask);
        _fileNames.Clear();
        DadosNFe = new List<DadosNotasFiscais>();
        ClearDragClass();
    }

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles(1000);
        foreach (var file in files)
        {
            if (Path.GetExtension(file.Name).Contains("xml"))
            {
                _fileNames.Add(file);
            }
        }
    }

    private async void Upload()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("Iniciando Processamento dos arquivos...");
        foreach (var file in _fileNames)
        {
            var dados = await ProcessarXML(file);
            if (dados != null)
            {
                foreach (var item in dados)
                {
                    DadosNFe.Add(item);
                }
            }
        }

        await SalvarDados();
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
    
    private async Task<List<DadosNotasFiscais>> ProcessarXML(IBrowserFile file)
    {
        try
        {
            using (var stream = file.OpenReadStream())
            {
                XDocument xmlDoc = await XDocument.LoadAsync(stream, LoadOptions.None, CancellationToken.None);  
                XNamespace ns = xmlDoc.Root.GetDefaultNamespace();

                List<DadosNotasFiscais> dadosDaNota = new List<DadosNotasFiscais>();
                var prodTag = xmlDoc.Descendants(ns + "prod");
                if (prodTag.Any())
                {

                    foreach (var item in prodTag)
                    {
                        var dados = new DadosNotasFiscais();
                        var numNfTag = xmlDoc.Descendants(ns + "ide").FirstOrDefault();
                        if (numNfTag != null)
                        {
                            dados.NumeroNota = numNfTag.Element(ns + "nNF")?.Value;
                        }

                        var emitenteTag = xmlDoc.Descendants(ns + "emit").FirstOrDefault();
                        if (emitenteTag != null)
                        {
                            dados.Fornecedor = emitenteTag.Element(ns + "xNome")?.Value;
                        }
                        
                        string produto = item.Element(ns + "xProd")?.Value;
                        dados.Produto = !string.IsNullOrEmpty(produto) ? produto : default;
                        
                        string valorUnitario = item.Element(ns + "vUnCom").Value;
                        dados.ValorUnitario = !string.IsNullOrEmpty(valorUnitario) && decimal.TryParse(valorUnitario, NumberStyles.Any, CultureInfo.InvariantCulture, out decimal unitResult) ? unitResult : 0m;

                        string cfop = item.Element(ns + "CFOP")?.Value;
                        dados.CFOP = !string.IsNullOrEmpty(cfop) ? cfop : default;
                        
                        dadosDaNota.Add(dados);
                    }
                    
                }

                return dadosDaNota;
            }
        }
        catch (Exception e)
        {
            // Aqui você pode adicionar um tratamento de erro mais detalhado, se necessário
            Snackbar.Add($"Erro ao processar o arquivo XML: {e.Message}", Severity.Error);
            return null;
        }
    }

    private async Task SalvarDados()
    {
        if (!DadosNFe.Any())
        {
            Snackbar.Add("Nenhuma infomação disponível para salvar", Severity.Warning);
            return;
        }

        var outputFolder = Path.Combine(Path.GetTempPath(), "DadosNotasFiscais");
        if (!Directory.Exists(outputFolder))
        {
            Directory.CreateDirectory(outputFolder);
        }

        string fileName = Path.Combine(outputFolder, $"DadosNFe-{DateTime.Now:dd-MM-yyyy}.xlsx");

        using (var workbook = new XLWorkbook())
        {
            var worksheet = workbook.Worksheets.Add("Dados Notas Fiscais");

            worksheet.Cell(1, 1).Value = "Fornecedor";
            worksheet.Cell(1, 2).Value = "Número NFe";
            worksheet.Cell(1, 3).Value = "Produto";
            worksheet.Cell(1, 4).Value = "Valor Unitário";
            worksheet.Cell(1, 5).Value = "CFOP";

            int novaLinha = 2;

            foreach (var linha in DadosNFe)
            {
                worksheet.Cell(novaLinha, 1).Value = linha.Fornecedor;
                worksheet.Cell(novaLinha, 2).Value = int.TryParse(linha.NumeroNota,out var numNFe) ? numNFe : default;
                worksheet.Cell(novaLinha, 3).Value = linha.Produto;
                worksheet.Cell(novaLinha, 4).Value = linha.ValorUnitario;
                worksheet.Cell(novaLinha, 5).Value = linha.CFOP;
                novaLinha++;
            }
            
            workbook.SaveAs(fileName);
        }

        var fileBytes = System.IO.File.ReadAllBytes(fileName);

        await DownloadFile(fileBytes, Path.GetFileName(fileName));
    }

    private async Task DownloadFile(byte[] fileBytes, string fileName)
    {
        var fileStream = new BlazorDownloadFileStream(fileBytes);
        var base64File = Convert.ToBase64String(fileBytes);

        await JSRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, base64File);
    }
}

