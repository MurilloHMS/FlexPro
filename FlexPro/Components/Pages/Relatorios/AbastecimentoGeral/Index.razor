@page "/Relatorios/Abastecimento/Geral/{Data}"
@using System.Text
@using Microsoft.EntityFrameworkCore
@using FlexPro.Data

@inject NavigationManager Navigation
@inject ApplicationDbContext _context

<MudText Typo="Typo.h3" Align="Align.Center">Métricas do relatório</MudText>

<MudTextField T="string" Label="Dados para o relatório" Variant="Variant.Outlined" Text="@resultado" AutoGrow/>

@code {
    private string? resultado { get; set; }
    
    private double? TotalLitrosMesAtual { get; set; }
    private double? TotalLitrosMesAnterior { get; set; }
    private double? TotalPercorridoMesAtual { get; set; }
    private double? TotalPercorridoMesAnterior { get; set; }
    private double? MediaKmMesAtual { get; set; }
    private double? MediaKmMesAnterior { get; set; }
    private decimal? ValorTotalGastoMesAtual { get; set; }
    private decimal? ValorTotalGastoMesAnterior { get; set; }
    private decimal? MediaPrecoLitroMesAtual { get; set; }
    private decimal? MediaPrecoLitroMesAnterior { get; set; }
    
    [Parameter] public string Data { get; set; }
    public DateTime DataConvertida { get; set; }
    
    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(Data))
        {
            DataConvertida = DateTime.MinValue; 
        }
        else if (DateTime.TryParse(Data, out var data))
        {
            DataConvertida = data;
        }
        else
        {
            DataConvertida = DateTime.MinValue;
        }

        if (DataConvertida != DateTime.MinValue)
        {
            resultado = await CalcularConsumoMensalAsync(DataConvertida);
        }
    }

    private async Task<string> CalcularConsumoMensalAsync(DateTime data)
    {
        var dataAtual = data.ToUniversalTime();
        var inicioMesAtual = new DateTime(dataAtual.Year, dataAtual.Month, 1).ToUniversalTime();
        var fimMesAtual = inicioMesAtual.AddMonths(1).AddDays(-1).ToUniversalTime();
        var inicioMesAnterior = inicioMesAtual.AddMonths(-1).ToUniversalTime();
        var fimMesAnterior = inicioMesAtual.AddDays(-1).ToUniversalTime();

        var abastecimentoMesAtual = await _context.Abastecimento.Where(a => a.DataDoAbastecimento >= inicioMesAtual && a.DataDoAbastecimento <= fimMesAtual).ToListAsync();
        var abastecimentoMesAnterior = await _context.Abastecimento.Where(a => a.DataDoAbastecimento >= inicioMesAnterior && a.DataDoAbastecimento <= fimMesAnterior).ToListAsync();

        TotalLitrosMesAtual = abastecimentoMesAtual.Sum(a => a.Litros);
        TotalLitrosMesAnterior = abastecimentoMesAnterior.Sum(a => a.Litros);

        TotalPercorridoMesAtual = abastecimentoMesAtual.Sum(a => a.DiferencaHodometro);
        TotalPercorridoMesAnterior = abastecimentoMesAnterior.Sum(a => a.DiferencaHodometro);

        MediaKmMesAtual = abastecimentoMesAtual.Sum(a => a.MediaKm) / abastecimentoMesAtual.Count();
        MediaKmMesAnterior = abastecimentoMesAnterior.Sum(a => a.MediaKm) / abastecimentoMesAnterior.Count();

        ValorTotalGastoMesAtual = abastecimentoMesAtual.Sum(a => a.ValorTotalTransacao);
        ValorTotalGastoMesAnterior = abastecimentoMesAnterior.Sum(a => a.ValorTotalTransacao);

        MediaPrecoLitroMesAtual = abastecimentoMesAtual.Sum(a => a.Preco) / abastecimentoMesAtual.Count();
        MediaPrecoLitroMesAnterior = abastecimentoMesAnterior.Sum(a => a.Preco) / abastecimentoMesAnterior.Count();

        StringBuilder sb = new StringBuilder();

        var porcentagemTotalLitros = (TotalLitrosMesAtual / TotalLitrosMesAnterior) -1;
        var descritivoTotalLitros = porcentagemTotalLitros < 0 ? "caiu" : "aumentou";
        sb.AppendLine($"Quantidade de litros abastecidos {descritivoTotalLitros} em {porcentagemTotalLitros:P} de R$ {TotalLitrosMesAnterior:N} para R$ {TotalLitrosMesAtual:N}");
        sb.AppendLine();

        var porcentagemMediaKm = (MediaKmMesAtual / MediaKmMesAnterior) - 1;
        var descritivoMediaKm = porcentagemMediaKm < 0 ? "caiu" : "aumentou";
        sb.AppendLine($"Média de KM/L {descritivoMediaKm} {porcentagemMediaKm:P} de {MediaKmMesAnterior:N} para {MediaKmMesAtual:N}");


        return sb.ToString();
    }
}
