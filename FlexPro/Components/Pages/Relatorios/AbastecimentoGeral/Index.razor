@page "/Relatorios/Abastecimento/Geral/{Data}"

@inject NavigationManager Navigation
@inject HttpClient Http
@inject AbastecimentoService AbastecimentoService

<MudText Typo="Typo.h3" Align="Align.Center">Métricas do relatório</MudText>

<MudTextField T="string" Label="Dados para o relatório" Variant="Variant.Outlined" Text="@resultado" Lines="15"/>

@code {
    private string? resultado { get; set; }
    
    [Parameter] public string Data { get; set; }
    public DateTime DataConvertida { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(Data))
        {
            DataConvertida = DateTime.MinValue;
        }
        else if (DateTime.TryParse(Data, out var data))
        {
            DataConvertida = data;
        }
        else
        {
            DataConvertida = DateTime.MinValue;
        }

        if (DataConvertida != DateTime.MinValue)
        {
            resultado = await Http.GetFromJsonAsync<string>($"api/abastecimento/calcular/geral/{DataConvertida}");
        }
    }
}
